EKS configuration:
    - Start creating EKS with a name
    - Create role:
        - Create a role with "EKS - Cluster" (predefined for EKS). Add this role to EKS. 
        Because EKS behind the will create EC2 instances
    - Create network:
        - It should be accessed from outside and inside
        - In cloudformation create a stack with EKS template.
        - Eks template url can be found here: https://docs.aws.amazon.com/eks/latest/userguide/creating-a-vpc.html#create-vpc
    - Cluster endpoint access is "Public and private"

    # <user-folder>/.kube/config controls the kubernetes cluster config of your machine to figure out which 
    cluster configuration kubernetes is using

    $ aws config 
        - configure aws account

    $ aws eks --region <region-name> update-kubeconfig --name <eks-cluster-name>
        - it will update the kubernetes config file to talk to aws cluster

EKS Worker Nodes:
    - Go to compute section of kubernetes cluster and click "Add node group"
    - Crate role:
        - the worker nodes are also ec2 instances
        - creae role with Policies: 
            "AmazonEKSWorkerNodePolicy",  
            "AmazonEKS_CNI_Policy", 
            "AmazonEC2ContainerRegistryReadOnly"
        - Select EC2 instance type


$ Kubectl get services
    - Give the ip/aws url to access service


Volumes:
    - csi volume type lets third party users integrate and create their own volume types
    - Amazon EFS CSI driver - is the type for volumes in aws efs

    - install AWS EFS CSI driver with: kubectl apply -k "<url in documentation installation section>"

    - create security group: 
        - with inbound rules NFS with CIDR of VPC for the EKS cluster
    
    - Create EFS:
        - use the EKS VPC
        - use the newly created security group
        - copy the file system id
    
Persistant Volume for  EFS:

    - driver: https://github.com/kubernetes-sigs/aws-efs-csi-driver

    efs-volume.yaml:
        // form:  https://github.com/kubernetes-sigs/aws-efs-csi-driver/blob/master/examples/kubernetes/static_provisioning/specs/storageclass.yaml
        // create the efs-sc class
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
        name: efs-sc
        provisioner: efs.csi.aws.com

        ---

        apiVersion: v1
        kind: PersistentVolume
        metadata:
            name: <volume name>
        spec:
            capacity:
                storage: 5Gi
            volumeMode: Filesystem
            accessModes:
                - ReadWriteMany
            storageClassName: efs-sc
            csi:
                driver: efs.csi.aws.com
                volumeHandle: <EFS file system id>
        
        ---

        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
            name: <name>
        spec:
            accessModes:
                - ReadWriteMany
            storageClassName: efs-sc
            resources:
                request:
                    storage: 5Gi

    - Use the persitant volume in the deployment

