
HTTPS (SSL):

    # redirect http request to https request:
        server {
            listen 80;
            server_name 167.99.93.26;
            return 301 https://$host$request_uri;
        }
        - this will redirect http request to equvalet https request
        - 301 means permanent redirect
    
    - SSL (Secure Sockets Layer) is replaced by TLS (Transport Layer Security) certificate

    # Optimizing HTTPS:
        server {
            listen 443 ssl http2;
            ...

            # Enable TLS
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                - HTTPS connection will be encrypted with TLS only

            ssl_prefer_server_ciphers on;
            ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5; 
                - Which cipher suits should we use with TLS protocol to encrypt our connection
                - ssl_ciphers defines which ciphers to use and not to use
            
            ssl_dhparam <path to dhparam.pem>;
                - Enable DH parameters
                - having them enabled allows key exchange between client and server in secure way
            
            # Enable HSTS
            add_header Strict-Transport-Security "max-age=31536000" always;
                - Header tells the client not to load anything over http
            
            # SSL session
            ssl_session_cache shared:SSL:40m;
                - cache the ssl handshake thus improving ssl connection times
                - ssl connection requires a handshake between client and server to read each other's encrypted data
                - 'shared' means it cached in memory, 'SSL' is the memory zone name, 40m is cache size
            ssl_session_timeout 4h;
                - time for cache
            ssl_session_tickets on;
                - means provide the browser with the ticket which validates the ssl session
                - ticket is issued by the server and held by client 
                - if client has the tickent, it allows us to bypass the session cache
        }

        $ openssl dhparam 2046 -out <path to dhparam.pem>
            - create dhparam
            - the size must be same as ssl certificate (when it was created created)


Rate Limiting:
    - it's like traffic lights for incoming connection
    - managing incoming connection to the server for a specific region
    - Reliability, Brute force protection

    - tool 'Siege' is for load testing the server, 'Apache Bench' is for benchmarking it

    $ siege -v -r 2 -c 5 <uri>
        - '-v'=verbose log, '-r 2'=run 2 tests, '-c 5'=5 concurrent connection
        - c5 * r2 = 10 requests
    
    http {
        limit_req_zone $binary_remote_addr zone=MYZONE:10m rate=60r/m [burst=5 [nodelay]];
            - first one is key which defines when to rate limit, $server_name = rate limiting is based server name
            - 'zone=MYZONE:10m' zone name with zone size
            - 'rate=60r/m' rate limit to 60 request per minute. equal to 1r/s (1 request per second)

            - 'burst=5' means it will keep another 5 request after rate limit in buffer and server it in the next rate
            limit iteration. 
            So it will response to first request immidiately and next 5 requests which were came in the one section,
            in next 5 seconds
            - 'nodelay' with 'burst' means the buffer will be responded as soon as possible with keeping limiting

            - with zone created it can be added to server/location context or any other sub context

        location / {
            limit_req zone=MYZONE [burst=5];
                - root location is added to rate limit zone
                - as root is added anything uri will be in this zone
        }       
    }


Basic Auth:
    - install apache2-utils
    $ htpasswd -c /etc/nginx/.htpasswd user1
        - adding a password for user name user1
    
    location / {
        auth_basic "Secure Area";
            - turn on basic auth and promt for user
        auth_basic_user_file /etc/nginx/.htpasswd;
            - username and password file
    }


Hardening Nginx:
    # Need to keep nginx third party packages up to date.
        $ apt-get update
        $ apt-get upgrade    

    # Turn off server version in the response header
        http {
            server_tokens off;
        }

    # Prevent click jacking
        add_header X-Frame-Options "SAMEORIGIN";
            - web page can be accessed in iframe only within same origin.
            - other option is "DENY"
        
        add_header X-XSS-Protection "1; mode=block";
            - if it detects cross site scripting then the page will stop loading
    
    # Remove unused / dangerous modules.
        $ <nginx dir>/configure --help
            - give all modules available to compile
            - module with --without prefix are added by default
            - remove --without-http_autoindex_module which give content of a directory
        
        $ nginx -V
        $ <nginx dir>/configure --without-http_autoindex_module <existing configurations from `nginx -V`>
        $ make
        $ make install


Let's Encrypt - SSL Certificate:
    - Provides free ssl certificates
    - tool 'certbot' helps to create/renew ssl certificates from Let's Encrypt

    $ certbot certonly -d yourdomain.com
        - cert only, does not modify nginx config
    
    $ certbot --nginx
        - creates cert and installs in nginx config
    
    $ certbot renew [--dry-run]
        - renew certificate
